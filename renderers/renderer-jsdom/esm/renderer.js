import { JSDOM, VirtualConsole } from 'jsdom';
import Bluebird from 'bluebird';
import console, { Console } from 'debug-color2';
export class JSDOMRenderer {
    constructor(rendererOptions) {
        this._rendererOptions = {};
        this.consoleDebug = new Console(console, {
            label: true,
            time: true,
            labelFormatFn(data) {
                return `[${JSDOMRenderer.ID}:${data.name.toUpperCase()}]`;
            }
        });
        Object.assign(this._rendererOptions, rendererOptions);
        if (this._rendererOptions.maxConcurrentRoutes == null)
            this._rendererOptions.maxConcurrentRoutes = 0;
        if (this._rendererOptions.inject && !this._rendererOptions.injectProperty) {
            this._rendererOptions.injectProperty = JSDOMRenderer.DEFAULT_INJECT_PROPERTY;
        }
        if (this._rendererOptions.disableLog) {
            this.consoleDebug.enabled = false;
        }
    }
    injectObject() {
        return this._rendererOptions.inject;
    }
    initialize() {
        // NOOP
        return Bluebird.resolve();
    }
    getVirtualConsole() {
        return this._virtualConsole || (this._virtualConsole = new VirtualConsole());
    }
    renderRoutes(routes, Prerenderer) {
        const self = this;
        const startTime = Date.now();
        return Bluebird.resolve()
            .then(() => {
            const rootOptions = Prerenderer.getOptions();
            const _rendererOptions = this._rendererOptions;
            const virtualConsole = self.getVirtualConsole();
            virtualConsole.on('jsdomError', e => self.consoleDebug.error('jsdomError', e));
            const referrer = _rendererOptions.referrer
                ? _rendererOptions.referrer.toString()
                : JSDOMRenderer.DEFAULT_REFERRER;
            return Bluebird
                .resolve(routes)
                .map(async (route) => {
                self.consoleDebug.debug(`route:start`, route);
                const jsdom = await JSDOM.fromURL(`http://127.0.0.1:${rootOptions.server.port}${route}`, {
                    resources: 'usable',
                    runScripts: 'dangerously',
                    // @ts-ignore
                    pretendToBeVisual: true,
                    includeNodeLocations: true,
                    referrer,
                    VirtualConsole: virtualConsole,
                });
                if (_rendererOptions.inject) {
                    jsdom.window[_rendererOptions.injectProperty] = self.injectObject();
                }
                jsdom.window.addEventListener('error', function (event) {
                    //self.consoleDebug.error(`window.error`, route, event.error)
                });
                return self.getPageContents(jsdom, _rendererOptions, route)
                    .tap(function () {
                    self.consoleDebug.debug(`route:end`, route);
                });
            })
                .tapCatch(e => {
                self.consoleDebug.error(`renderRoutes`, e.message);
            });
        })
            .tap(() => {
            self.consoleDebug.success(`renderRoutes:done`, routes, routes.length);
        })
            .finally(() => {
            self.consoleDebug.debug(`renderRoutes:end`, routes, `used`, (Date.now() - startTime) / 1000, 'sec');
        });
    }
    destroy() {
        // NOOP
    }
    getPageContents(jsdom, options, originalRoute) {
        options = options || {};
        const self = this;
        return new Bluebird(async (resolve, reject) => {
            const startTime = Date.now();
            let int;
            let _resolved;
            async function captureDocument() {
                _resolved = true;
                resetTimer();
                return Bluebird
                    .delay(options.renderAfterDelay | 0)
                    .then(() => {
                    const result = {
                        originalRoute: originalRoute,
                        route: originalRoute,
                        html: jsdom.serialize(),
                    };
                    jsdom.window.close();
                    return result;
                })
                    .tap(() => {
                    self.consoleDebug.success(`captureDocument:done`, originalRoute);
                })
                    .tapCatch(e => {
                    self.consoleDebug.error(`captureDocument`, e);
                })
                    .finally(() => {
                    self.consoleDebug.debug(`captureDocument:end`, originalRoute, `used`, (Date.now() - startTime) / 1000, 'sec');
                });
            }
            function resetTimer() {
                if (int != null) {
                    clearInterval(int);
                    int = null;
                }
            }
            function done() {
                resetTimer();
                if (!_resolved) {
                    resolve(captureDocument());
                }
            }
            let bool;
            // CAPTURE WHEN AN EVENT FIRES ON THE DOCUMENT
            if (options.renderAfterDocumentEvent) {
                bool = true;
                jsdom.window.document.addEventListener(options.renderAfterDocumentEvent, () => done());
                // CAPTURE ONCE A SPECIFC ELEMENT EXISTS
            }
            if (options.renderAfterElementExists) {
                bool = true;
                // @ts-ignore
                int = setInterval(() => {
                    if (jsdom.window.document.querySelector(options.renderAfterElementExists))
                        done();
                }, 100);
                // CAPTURE AFTER A NUMBER OF MILLISECONDS
            }
            if (bool) {
                setTimeout(done, (options.renderAfterTimeMax | 0) || 30000);
            }
            else if (options.renderAfterTime) {
                setTimeout(done, options.renderAfterTime);
                // DEFAULT: RUN IMMEDIATELY
            }
            else {
                done();
            }
        });
    }
}
JSDOMRenderer.DEFAULT_REFERRER = new URL(`https://prerenderer-renderer-jsdom`).toString();
JSDOMRenderer.DEFAULT_INJECT_PROPERTY = '__PRERENDER_INJECTED';
JSDOMRenderer.ID = 'JSDOMRenderer';
export default JSDOMRenderer;
//# sourceMappingURL=data:application/json;base64,