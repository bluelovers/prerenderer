import { JSDOM } from 'jsdom';
import Bluebird from 'bluebird';
export class JSDOMRenderer {
    constructor(rendererOptions) {
        this._rendererOptions = {};
        Object.assign(this._rendererOptions, rendererOptions);
        if (this._rendererOptions.maxConcurrentRoutes == null)
            this._rendererOptions.maxConcurrentRoutes = 0;
        if (this._rendererOptions.inject && !this._rendererOptions.injectProperty) {
            this._rendererOptions.injectProperty = '__PRERENDER_INJECTED';
        }
    }
    initialize() {
        // NOOP
        return Bluebird.resolve();
    }
    renderRoutes(routes, Prerenderer) {
        const rootOptions = Prerenderer.getOptions();
        const self = this;
        return Bluebird
            .resolve(routes)
            .bind(self)
            .map((route) => {
            return new Bluebird(async (resolve, reject) => {
                const jsdom = await JSDOM.fromURL(`http://127.0.0.1:${rootOptions.server.port}${route}`, {
                    resources: 'usable',
                    runScripts: 'dangerously',
                });
                const { window } = jsdom;
                if (self._rendererOptions.inject) {
                    window[self._rendererOptions.injectProperty] = self._rendererOptions.inject;
                }
                window.addEventListener('error', function (event) {
                    console.error(event.error);
                });
                return getPageContents(jsdom, self._rendererOptions, route);
            });
        })
            .tapCatch(e => {
            console.error(e);
        });
    }
    destroy() {
        // NOOP
    }
}
export function getPageContents(jsdom, options, originalRoute) {
    options = options || {};
    const { window } = jsdom;
    const { document } = window;
    return new Bluebird((resolve, reject) => {
        let int;
        async function captureDocument() {
            if (options.renderAfterDelay > 0) {
                await Bluebird.delay(options.renderAfterDelay | 0);
            }
            const result = {
                originalRoute: originalRoute,
                route: originalRoute,
                html: jsdom.serialize(),
            };
            if (int != null) {
                clearInterval(int);
            }
            window.close();
            return result;
        }
        let bool;
        // CAPTURE WHEN AN EVENT FIRES ON THE DOCUMENT
        if (options.renderAfterDocumentEvent) {
            bool = true;
            document.addEventListener(options.renderAfterDocumentEvent, () => resolve(captureDocument()));
            // CAPTURE ONCE A SPECIFC ELEMENT EXISTS
        }
        if (options.renderAfterElementExists) {
            bool = true;
            // @ts-ignore
            int = setInterval(() => {
                if (document.querySelector(options.renderAfterElementExists))
                    resolve(captureDocument());
            }, 100);
            // CAPTURE AFTER A NUMBER OF MILLISECONDS
        }
        if (bool) {
            setTimeout(() => resolve(captureDocument()), (options.renderAfterTimeMax | 0) || 30000);
        }
        else if (options.renderAfterTime) {
            setTimeout(() => resolve(captureDocument()), options.renderAfterTime);
            // DEFAULT: RUN IMMEDIATELY
        }
        else {
            resolve(captureDocument());
        }
    });
}
export default JSDOMRenderer;
//# sourceMappingURL=data:application/json;base64,